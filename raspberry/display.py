import time
import settings
from fonts import tahoma, arialblack, verdana, lucidaconsole, wingdings, webdings

if settings.ON_RASPBERRY:
   import RPi.GPIO as GPIO


ASCII168=(
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),#" ",0
(0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00),#"!",1
(0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),#""",2
(0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00),#"#",3
(0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00),#"$",4
(0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00),#"%",5
(0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10),#"&",6
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00),#",",7
(0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00),#"(",8
(0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00),#")",9
(0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00),#"*",10
(0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00),#"+",11
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00),#",",12
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01),#"-",13
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00),#".",14
(0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00),#"/",15
(0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00),#"0",16
(0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00),#"1",17
(0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00),#"2",18
(0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00),#"3",19
(0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00),#"4",20
(0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00),#"5",21
(0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00),#"6",22
(0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00),#"7",23
(0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00),#"8",24
(0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00),#"9",25
(0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00),#":",26
(0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00),#";",27
(0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00),#"<",28
(0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00),#"=",29
(0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00),#">",30
(0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00),#"?",31
(0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00),#"@",32
(0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20),#"A",33
(0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00),#"B",34
(0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00),#"C",35
(0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00),#"D",36
(0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00),#"E",37
(0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00),#"F",38
(0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00),#"G",39
(0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20),#"H",40
(0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00),#"I",41
(0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00),#"J",42
(0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00),#"K",43
(0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00),#"L",44
(0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00),#"M",45
(0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00),#"N",46
(0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00),#"O",47
(0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00),#"P",48
(0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00),#"Q",49
(0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20),#"R",50
(0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00),#"S",51
(0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00),#"T",52
(0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00),#"U",53
(0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00),#"V",54
(0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00),#"W",55
(0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20),#"X",56
(0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00),#"Y",57
(0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00),#"Z",58
(0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00),#"[",59
(0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00),#"/",60
(0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00),#"]",61
(0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),#"^",62
(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01),#"-",63
(0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00),#"\",64
(0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20),#"a",65
(0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00),#"b",66
(0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00),#"c",67
(0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20),#"d",68
(0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00),#"e",69
(0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00),#"f",70
(0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00),#"g",71
(0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20),#"h",72
(0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00),#"i",73
(0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00),#"j",74
(0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00),#"k",75
(0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00),#"l",76
(0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F),#"m",77
(0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20),#"n",79
(0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00),#"o",80
(0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00),#"p",81
(0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80),#"q",82
(0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00),#"r",83
(0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00),#"s",84
(0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00),#"t",85
(0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20),#"u",86
(0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00),#"v",87
(0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00),#"w",88
(0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00),#"x",89
(0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00),#"y",90
(0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00),#"z",91
(0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40),#"{",92
(0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00),#"|",93
(0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00),#"}",94
(0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00),#"~",95
)

DUMMY57 = (
  (0x0, 0x0, 0x0, 0x0, 0x0),
  (0x7C, 0xDA, 0xF2, 0xDA, 0x7C),
  (0x7C, 0xD6, 0xF2, 0xD6, 0x7C),
  (0x38, 0x7C, 0x3E, 0x7C, 0x38),
  (0x18, 0x3C, 0x7E, 0x3C, 0x18),
  (0x38, 0xEA, 0xBE, 0xEA, 0x38),
  (0x38, 0x7A, 0xFE, 0x7A, 0x38),
  (0x0, 0x18, 0x3C, 0x18, 0x0),
  (0xFF, 0xE7, 0xC3, 0xE7, 0xFF),
  (0x0, 0x18, 0x24, 0x18, 0x0),
  (0xFF, 0xE7, 0xDB, 0xE7, 0xFF),
  (0xC, 0x12, 0x5C, 0x60, 0x70),
  (0x64, 0x94, 0x9E, 0x94, 0x64),
  (0x2, 0xFE, 0xA0, 0xA0, 0xE0),
  (0x2, 0xFE, 0xA0, 0xA4, 0xFC),
  (0x5A, 0x3C, 0xE7, 0x3C, 0x5A),
  (0xFE, 0x7C, 0x38, 0x38, 0x10),
  (0x10, 0x38, 0x38, 0x7C, 0xFE),
  (0x28, 0x44, 0xFE, 0x44, 0x28),
  (0xFA, 0xFA, 0x0, 0xFA, 0xFA),
  (0x60, 0x90, 0xFE, 0x80, 0xFE),
  (0x0, 0x66, 0x91, 0xA9, 0x56),
  (0x6, 0x6, 0x6, 0x6, 0x6),
  (0x29, 0x45, 0xFF, 0x45, 0x29),
  (0x10, 0x20, 0x7E, 0x20, 0x10),
  (0x8, 0x4, 0x7E, 0x4, 0x8),
  (0x10, 0x10, 0x54, 0x38, 0x10),
  (0x10, 0x38, 0x54, 0x10, 0x10),
  (0x78, 0x8, 0x8, 0x8, 0x8),
  (0x30, 0x78, 0x30, 0x78, 0x30),
  (0xC, 0x1C, 0x7C, 0x1C, 0xC),
  (0x60, 0x70, 0x7C, 0x70, 0x60),
  (0x0, 0x0, 0x0, 0x0, 0x0),
  (0x0, 0x0, 0xFA, 0x0, 0x0),
  (0x0, 0xE0, 0x0, 0xE0, 0x0),
  (0x28, 0xFE, 0x28, 0xFE, 0x28),
  (0x24, 0x54, 0xFE, 0x54, 0x48),
  (0xC4, 0xC8, 0x10, 0x26, 0x46),
  (0x6C, 0x92, 0x6A, 0x4, 0xA),
  (0x0, 0x10, 0xE0, 0xC0, 0x0),
  (0x0, 0x38, 0x44, 0x82, 0x0),
  (0x0, 0x82, 0x44, 0x38, 0x0),
  (0x54, 0x38, 0xFE, 0x38, 0x54),
  (0x10, 0x10, 0x7C, 0x10, 0x10),
  (0x0, 0x1, 0xE, 0xC, 0x0),
  (0x10, 0x10, 0x10, 0x10, 0x10),
  (0x0, 0x0, 0x6, 0x6, 0x0),
  (0x4, 0x8, 0x10, 0x20, 0x40),
  (0x7C, 0x8A, 0x92, 0xA2, 0x7C),
  (0x0, 0x42, 0xFE, 0x2, 0x0),
  (0x4E, 0x92, 0x92, 0x92, 0x62),
  (0x84, 0x82, 0x92, 0xB2, 0xCC),
  (0x18, 0x28, 0x48, 0xFE, 0x8),
  (0xE4, 0xA2, 0xA2, 0xA2, 0x9C),
  (0x3C, 0x52, 0x92, 0x92, 0x8C),
  (0x82, 0x84, 0x88, 0x90, 0xE0),
  (0x6C, 0x92, 0x92, 0x92, 0x6C),
  (0x62, 0x92, 0x92, 0x94, 0x78),
  (0x0, 0x0, 0x28, 0x0, 0x0),
  (0x0, 0x2, 0x2C, 0x0, 0x0),
  (0x0, 0x10, 0x28, 0x44, 0x82),
  (0x28, 0x28, 0x28, 0x28, 0x28),
  (0x0, 0x82, 0x44, 0x28, 0x10),
  (0x40, 0x80, 0x9A, 0x90, 0x60),
  (0x7C, 0x82, 0xBA, 0x9A, 0x72),
  (0x3E, 0x48, 0x88, 0x48, 0x3E),
  (0xFE, 0x92, 0x92, 0x92, 0x6C),
  (0x7C, 0x82, 0x82, 0x82, 0x44),
  (0xFE, 0x82, 0x82, 0x82, 0x7C),
  (0xFE, 0x92, 0x92, 0x92, 0x82),
  (0xFE, 0x90, 0x90, 0x90, 0x80),
  (0x7C, 0x82, 0x82, 0x8A, 0xCE),
  (0xFE, 0x10, 0x10, 0x10, 0xFE),
  (0x0, 0x82, 0xFE, 0x82, 0x0),
  (0x4, 0x2, 0x82, 0xFC, 0x80),
  (0xFE, 0x10, 0x28, 0x44, 0x82),
  (0xFE, 0x2, 0x2, 0x2, 0x2),
  (0xFE, 0x40, 0x38, 0x40, 0xFE),
  (0xFE, 0x20, 0x10, 0x8, 0xFE),
  (0x7C, 0x82, 0x82, 0x82, 0x7C),
  (0xFE, 0x90, 0x90, 0x90, 0x60),
  (0x7C, 0x82, 0x8A, 0x84, 0x7A),
  (0xFE, 0x90, 0x98, 0x94, 0x62),
  (0x64, 0x92, 0x92, 0x92, 0x4C),
  (0xC0, 0x80, 0xFE, 0x80, 0xC0),
  (0xFC, 0x2, 0x2, 0x2, 0xFC),
  (0xF8, 0x4, 0x2, 0x4, 0xF8),
  (0xFC, 0x2, 0x1C, 0x2, 0xFC),
  (0xC6, 0x28, 0x10, 0x28, 0xC6),
  (0xC0, 0x20, 0x1E, 0x20, 0xC0),
  (0x86, 0x9A, 0x92, 0xB2, 0xC2),
  (0x0, 0xFE, 0x82, 0x82, 0x82),
  (0x40, 0x20, 0x10, 0x8, 0x4),
  (0x0, 0x82, 0x82, 0x82, 0xFE),
  (0x20, 0x40, 0x80, 0x40, 0x20),
  (0x2, 0x2, 0x2, 0x2, 0x2),
  (0x0, 0xC0, 0xE0, 0x10, 0x0),
  (0x4, 0x2A, 0x2A, 0x1E, 0x2),
  (0xFE, 0x14, 0x22, 0x22, 0x1C),
  (0x1C, 0x22, 0x22, 0x22, 0x14),
  (0x1C, 0x22, 0x22, 0x14, 0xFE),
  (0x1C, 0x2A, 0x2A, 0x2A, 0x18),
  (0x0, 0x10, 0x7E, 0x90, 0x40),
  (0x18, 0x25, 0x25, 0x39, 0x1E),
  (0xFE, 0x10, 0x20, 0x20, 0x1E),
  (0x0, 0x22, 0xBE, 0x2, 0x0),
  (0x4, 0x2, 0x2, 0xBC, 0x0),
  (0xFE, 0x8, 0x14, 0x22, 0x0),
  (0x0, 0x82, 0xFE, 0x2, 0x0),
  (0x3E, 0x20, 0x1E, 0x20, 0x1E),
  (0x3E, 0x10, 0x20, 0x20, 0x1E),
  (0x1C, 0x22, 0x22, 0x22, 0x1C),
  (0x3F, 0x18, 0x24, 0x24, 0x18),
  (0x18, 0x24, 0x24, 0x18, 0x3F),
  (0x3E, 0x10, 0x20, 0x20, 0x10),
  (0x12, 0x2A, 0x2A, 0x2A, 0x24),
  (0x20, 0x20, 0xFC, 0x22, 0x24),
  (0x3C, 0x2, 0x2, 0x4, 0x3E),
  (0x38, 0x4, 0x2, 0x4, 0x38),
  (0x3C, 0x2, 0xC, 0x2, 0x3C),
  (0x22, 0x14, 0x8, 0x14, 0x22),
  (0x32, 0x9, 0x9, 0x9, 0x3E),
  (0x22, 0x26, 0x2A, 0x32, 0x22),
  (0x0, 0x10, 0x6C, 0x82, 0x0),
  (0x0, 0x0, 0xEE, 0x0, 0x0),
  (0x0, 0x82, 0x6C, 0x10, 0x0),
  (0x40, 0x80, 0x40, 0x20, 0x40),
  (0x3C, 0x64, 0xC4, 0x64, 0x3C),
  (0x78, 0x85, 0x85, 0x86, 0x48),
  (0x5C, 0x2, 0x2, 0x4, 0x5E),
  (0x1C, 0x2A, 0x2A, 0xAA, 0x9A),
  (0x84, 0xAA, 0xAA, 0x9E, 0x82),
  (0x84, 0x2A, 0x2A, 0x1E, 0x82),
  (0x84, 0xAA, 0x2A, 0x1E, 0x2),
  (0x4, 0x2A, 0xAA, 0x9E, 0x2),
  (0x30, 0x78, 0x4A, 0x4E, 0x48),
  (0x9C, 0xAA, 0xAA, 0xAA, 0x9A),
  (0x9C, 0x2A, 0x2A, 0x2A, 0x9A),
  (0x9C, 0xAA, 0x2A, 0x2A, 0x1A),
  (0x0, 0x0, 0xA2, 0x3E, 0x82),
  (0x0, 0x40, 0xA2, 0xBE, 0x42),
  (0x0, 0x80, 0xA2, 0x3E, 0x2),
  (0xF, 0x94, 0x24, 0x94, 0xF),
  (0xF, 0x14, 0xA4, 0x14, 0xF),
  (0x3E, 0x2A, 0xAA, 0xA2, 0x0),
  (0x4, 0x2A, 0x2A, 0x3E, 0x2A),
  (0x3E, 0x50, 0x90, 0xFE, 0x92),
  (0x4C, 0x92, 0x92, 0x92, 0x4C),
  (0x4C, 0x12, 0x12, 0x12, 0x4C),
  (0x4C, 0x52, 0x12, 0x12, 0xC),
  (0x5C, 0x82, 0x82, 0x84, 0x5E),
  (0x5C, 0x42, 0x2, 0x4, 0x1E),
  (0x0, 0xB9, 0x5, 0x5, 0xBE),
  (0x9C, 0x22, 0x22, 0x22, 0x9C),
  (0xBC, 0x2, 0x2, 0x2, 0xBC),
  (0x3C, 0x24, 0xFF, 0x24, 0x24),
  (0x12, 0x7E, 0x92, 0xC2, 0x66),
  (0xD4, 0xF4, 0x3F, 0xF4, 0xD4),
  (0xFF, 0x90, 0x94, 0x6F, 0x4),
  (0x3, 0x11, 0x7E, 0x90, 0xC0),
  (0x4, 0x2A, 0x2A, 0x9E, 0x82),
  (0x0, 0x0, 0x22, 0xBE, 0x82),
  (0xC, 0x12, 0x12, 0x52, 0x4C),
  (0x1C, 0x2, 0x2, 0x44, 0x5E),
  (0x0, 0x5E, 0x50, 0x50, 0x4E),
  (0xBE, 0xB0, 0x98, 0x8C, 0xBE),
  (0x64, 0x94, 0x94, 0xF4, 0x14),
  (0x64, 0x94, 0x94, 0x94, 0x64),
  (0xC, 0x12, 0xB2, 0x2, 0x4),
  (0x1C, 0x10, 0x10, 0x10, 0x10),
  (0x10, 0x10, 0x10, 0x10, 0x1C),
  (0xF4, 0x8, 0x13, 0x35, 0x5D),
  (0xF4, 0x8, 0x14, 0x2C, 0x5F),
  (0x0, 0x0, 0xDE, 0x0, 0x0),
  (0x10, 0x28, 0x54, 0x28, 0x44),
  (0x44, 0x28, 0x54, 0x28, 0x10),
  (0x55, 0x0, 0xAA, 0x0, 0x55),
  (0x55, 0xAA, 0x55, 0xAA, 0x55),
  (0xAA, 0x55, 0xAA, 0x55, 0xAA),
  (0x0, 0x0, 0x0, 0xFF, 0x0),
  (0x8, 0x8, 0x8, 0xFF, 0x0),
  (0x28, 0x28, 0x28, 0xFF, 0x0),
  (0x8, 0x8, 0xFF, 0x0, 0xFF),
  (0x8, 0x8, 0xF, 0x8, 0xF),
  (0x28, 0x28, 0x28, 0x3F, 0x0),
  (0x28, 0x28, 0xEF, 0x0, 0xFF),
  (0x0, 0x0, 0xFF, 0x0, 0xFF),
  (0x28, 0x28, 0x2F, 0x20, 0x3F),
  (0x28, 0x28, 0xE8, 0x8, 0xF8),
  (0x8, 0x8, 0xF8, 0x8, 0xF8),
  (0x28, 0x28, 0x28, 0xF8, 0x0),
  (0x8, 0x8, 0x8, 0xF, 0x0),
  (0x0, 0x0, 0x0, 0xF8, 0x8),
  (0x8, 0x8, 0x8, 0xF8, 0x8),
  (0x8, 0x8, 0x8, 0xF, 0x8),
  (0x0, 0x0, 0x0, 0xFF, 0x8),
  (0x8, 0x8, 0x8, 0x8, 0x8),
  (0x8, 0x8, 0x8, 0xFF, 0x8),
  (0x0, 0x0, 0x0, 0xFF, 0x28),
  (0x0, 0x0, 0xFF, 0x0, 0xFF),
  (0x0, 0x0, 0xF8, 0x8, 0xE8),
  (0x0, 0x0, 0x3F, 0x20, 0x2F),
  (0x28, 0x28, 0xE8, 0x8, 0xE8),
  (0x28, 0x28, 0x2F, 0x20, 0x2F),
  (0x0, 0x0, 0xFF, 0x0, 0xEF),
  (0x28, 0x28, 0x28, 0x28, 0x28),
  (0x28, 0x28, 0xEF, 0x0, 0xEF),
  (0x28, 0x28, 0x28, 0xE8, 0x28),
  (0x8, 0x8, 0xF8, 0x8, 0xF8),
  (0x28, 0x28, 0x28, 0x2F, 0x28),
  (0x8, 0x8, 0xF, 0x8, 0xF),
  (0x0, 0x0, 0xF8, 0x8, 0xF8),
  (0x0, 0x0, 0x0, 0xF8, 0x28),
  (0x0, 0x0, 0x0, 0x3F, 0x28),
  (0x0, 0x0, 0xF, 0x8, 0xF),
  (0x8, 0x8, 0xFF, 0x8, 0xFF),
  (0x28, 0x28, 0x28, 0xFF, 0x28),
  (0x8, 0x8, 0x8, 0xF8, 0x0),
  (0x0, 0x0, 0x0, 0xF, 0x8),
  (0xFF, 0xFF, 0xFF, 0xFF, 0xFF),
  (0xF, 0xF, 0xF, 0xF, 0xF),
  (0xFF, 0xFF, 0xFF, 0x0, 0x0),
  (0x0, 0x0, 0x0, 0xFF, 0xFF),
  (0xF0, 0xF0, 0xF0, 0xF0, 0xF0),
  (0x1C, 0x22, 0x22, 0x1C, 0x22),
  (0x3E, 0x54, 0x54, 0x7C, 0x28),
  (0x7E, 0x40, 0x40, 0x60, 0x60),
  (0x40, 0x7E, 0x40, 0x7E, 0x40),
  (0xC6, 0xAA, 0x92, 0x82, 0xC6),
  (0x1C, 0x22, 0x22, 0x3C, 0x20),
  (0x2, 0x7E, 0x4, 0x78, 0x4),
  (0x60, 0x40, 0x7E, 0x40, 0x40),
  (0x99, 0xA5, 0xE7, 0xA5, 0x99),
  (0x38, 0x54, 0x92, 0x54, 0x38),
  (0x32, 0x4E, 0x80, 0x4E, 0x32),
  (0xC, 0x52, 0xB2, 0xB2, 0xC),
  (0xC, 0x12, 0x1E, 0x12, 0xC),
  (0x3D, 0x46, 0x5A, 0x62, 0xBC),
  (0x7C, 0x92, 0x92, 0x92, 0x0),
  (0x7E, 0x80, 0x80, 0x80, 0x7E),
  (0x54, 0x54, 0x54, 0x54, 0x54),
  (0x22, 0x22, 0xFA, 0x22, 0x22),
  (0x2, 0x8A, 0x52, 0x22, 0x2),
  (0x2, 0x22, 0x52, 0x8A, 0x2),
  (0x0, 0x0, 0xFF, 0x80, 0xC0),
  (0x7, 0x1, 0xFF, 0x0, 0x0),
  (0x10, 0x10, 0xD6, 0xD6, 0x10),
  (0x6C, 0x48, 0x6C, 0x24, 0x6C),
  (0x60, 0xF0, 0x90, 0xF0, 0x60),
  (0x0, 0x0, 0x18, 0x18, 0x0),
  (0x0, 0x0, 0x8, 0x8, 0x0),
  (0xC, 0x2, 0xFF, 0x80, 0x80),
  (0x0, 0xF8, 0x80, 0x80, 0x78),
  (0x0, 0x98, 0xB8, 0xE8, 0x48),
  (0x0, 0x3C, 0x3C, 0x3C, 0x3C))

ASCII3216 = (

   ( 0x00, 0x00,
     0x00, 0x00,
     0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00),

)

class RGBDisplay(object):

    def __init__(self, cs, rst, a0, clk, si):
        self.cs = cs
        self.rst = rst
        self.a0 = a0
        self.clk = clk
        self.si = si

        self.io_init()
        self.lcd_init()
        #self.lcd_clear()

        self.display = [[" "] * 16 for x in xrange(8)]
        return

    def io_init(self):
        if settings.ON_RASPBERRY:
            GPIO.setup(self.cs, GPIO.OUT)
            GPIO.setup(self.rst, GPIO.OUT)
            GPIO.setup(self.a0, GPIO.OUT)
            GPIO.setup(self.clk, GPIO.OUT)
            GPIO.setup(self.si, GPIO.OUT)
        else:
            print "[DISPLAY] IO Init"

        return

    def lcd_init(self):
        if settings.ON_RASPBERRY:
            GPIO.output(self.cs, True)
            GPIO.output(self.rst, False)
            GPIO.output(self.rst, True)
            self.lcd_tranfer_data(0xe2,0) # DEf: 0xe2
            self.lcd_tranfer_data(0xa3,0) # Def: 0xa3
            self.lcd_tranfer_data(0xa0,0) # 0xa0 -> normal, 0xa1 -> reversed
            self.lcd_tranfer_data(0xc8,0)
            self.lcd_tranfer_data(0xa4,0)
            self.lcd_tranfer_data(0xa7,0) # 0xa7 -> black text white bg, 0xa6 -> white text black bg
            self.lcd_tranfer_data(0x2f,0)
            self.lcd_tranfer_data(0x40,0)
            self.lcd_tranfer_data(0x22,0)
            self.lcd_tranfer_data(0x81,0)
            self.lcd_tranfer_data(0x28,0)
            self.lcd_tranfer_data(0xaf,0)

            # Set contrast (To max!)
            val = 100
            self.lcd_tranfer_data(0x81, 0)
            self.lcd_tranfer_data(0 | (val & 0x3f), 0)
            
            self.lcd_clear()
            #self.clear()
        else:
            print "[DISPLAY] LCD Init"
        return

    def print_screen(self):
        print "-" * 18
        for l in self.display:
            print "|" + "".join(l) + "|"
            pass
        print "-" * 18
        return

    def lcd_font_string(self, xPos, yPos, string, font):
       stringLen = len(string)       
       offset = 0
       
       for i in range(0, stringLen):
          char = ord(string[i]) - 32
          height = font['height']
          width = font['chars'][char][0]
          
          self.lcd_font(xPos + offset, yPos, char, font)

          offset += width + 1  # char width +  spacing between letters..

       if offset > 0:
          offset -= 1
          
       return offset

    def get_font_width(self, string, font):
       stringLen = len(string)       
       offset = 0
       
       for i in range(0, stringLen):
          char = ord(string[i]) - 32
          width = font['chars'][char][0]
          offset += width + 1  # char width +  spacing between letters..

       if offset > 0:
          offset -= 1
          
       return offset
       
    
    def lcd_ascii168_string(self, xPos, yPos, string):
        if settings.ON_RASPBERRY:
            stringLen = len(string)
            offset = 0
            for i in range(0, stringLen):
                self.lcd_ascii168(xPos + (i * 8), yPos, ord(string[i]) - 32)
        else:
            for x in xrange(len(string)):
                self.display[yPos][xPos + x] = string[x]

            self.print_screen()
        return

    def lcd_ascii168(self, xPos, yPos, char, font=ASCII168):
        if settings.ON_RASPBERRY:
            yPos = (yPos + 4) % 8  # Workaround..

            if font == ASCII168:
               # (0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,
               #  0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00), #">",30
               #
               ##01234567
               # 00000100
               # 00001000
               # 00010000
               # 00100000
               # 01000000
               # 00000000
               # 00000000
               # 00000000
               ##89ABCDEF
               # 00000000
               # 00000000
               # 01000000
               # 00100000
               # 00010000
               # 00001000
               # 00000100
               # 00000010
               self.lcd_set_page(yPos, xPos)
               for i in range(0, 8):
                   self.lcd_tranfer_data(ASCII168[char][i], 1)
               self.lcd_set_page(yPos + 1, xPos)
               for i in range(8, 16):
                   self.lcd_tranfer_data(ASCII168[char][i], 1)
            elif font == DUMMY57:
               self.lcd_set_page(yPos, xPos)
               for i in range(0, 5):
                   self.lcd_tranfer_data(DUMMY57[char][i], 1)
            elif font == ASCII3216:
               # TODO: Not working
               self.lcd_set_page(yPos, xPos)
               yPos = 0
               xPos = 0
               self.lcd_set_page(yPos, xPos)
               for r in ((0, 8), (8, 16), (16, 32), (32, 48)):
                  for i in range(r[0], r[1]):
                      self.lcd_tranfer_data(ASCII3216[0][i], 1)
                  self.lcd_set_page(yPos + 1, xPos)
            elif font in tahoma.TahomaFamily:
               height = font['height']
               width = font['chars'][char][0]
               bitmap = font['chars'][char][1:]

               # 0x01 | 0xFE,0x1B -> 1111110 0001 1011 and is '!'
               # Idea -> 1th page bottom to up, 2page bottom to up
               # 0x8 | 0x08,0x08,0x10,0x04,0x10,0x04,0x20,0x02,0x20,0x02,0x40,0x01,0x40,0x01,0x80,0x00 is ">"
               # Len = 8
               # lets' see in binary..
               # 0 | 0x08 | 00001000
               # 1 | 0x08 | 00001000
               # 2 | 0x10 | 00010000
               # 3 | 0x04 | 00000100
               # 4 | 0x10 | 00010000
               # 5 | 0x04 | 00000100
               # 6 | 0x20 | 00100000
               # 7 | 0x02 | 00000010
               # 8 | 0x20 | 00100000
               # 9 | 0x02 | 00000010
               # A | 0x40 | 01000000
               # B | 0x01 | 00000001
               # C | 0x40 | 01000000
               # D | 0x01 | 00000001
               # E | 0x80 | 10000000
               # F | 0x00 | 00000000


               # Make it in columns.. god damn it!
               ####13579BDF
               #   00000000
               #   00000000
               #   00000000
               #   00000000
               #   10000000
               #   01100000
               #   00011000
               #   00000110
               ####02468ACE
               #   00000001
               #   00000110
               #   00011000
               #   01100000
               #   10000000
               #   00000000
               #   00000000
               #   00000000

               # HEight : 35px.
               # Width: 18px
               #(0x12, 0x00,0x07,0x00,0x07,0x00,0x00,0x0E,0x80,0x03,0x00,0x00,0x0E,0x80,0x03,0x00,0x00,0x1C,0xC0,0x01,0x00,0x00,0x1C,0xC0,0x01,0x00,0x00,0x38,0xE0,0x00,0x00,0x00,0x38,0xE0,0x00,0x00,0x00,0x38,0xE0,0x00,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0x70,0x70,0x00,0x00,0x00,0xE0,0x38,0x00,0x00,0x00,0xE0,0x38,0x00,0x00,0x00,0xC0,0x1D,0x00,0x00,0x00,0xC0,0x1D,0x00,0x00,0x00,0x80,0x0F,0x00,0x00,0x00,0x80,0x0F,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x07,0x00,0x00), # ">"

               #
               #
               #

               # This shoudl always be an integer..
               pages = len(bitmap) / width

               for y in xrange(pages):
                  self.lcd_set_page(yPos + y, xPos)
                  for i in range(width):
                     self.lcd_tranfer_data(bitmap[(i * pages) + y], 1)
        else:
            self.display[yPos][xPos] = char
            self.print_screen()
        return

    def lcd_font(self, xPos, yPos, char, font):
       yPos = (yPos + 4) % 8  # Workaround..
       
       height = font['height']
       width = font['chars'][char][0]
       bitmap = font['chars'][char][1:]

       # This should always be an integer..
       pages = len(bitmap) / width

       for y in xrange(pages):
          self.lcd_set_page((yPos + y) % 8, xPos)
          for i in range(width):
             self.lcd_tranfer_data(bitmap[(i * pages) + y], 1)
       return

    def lcd_area_clear(self, xPos, yPos, pages, width):
        yPos = (yPos + 4) % 8  # Workaround..
       
        if settings.ON_RASPBERRY:
            GPIO.output(self.cs, False)
            for p in xrange(pages):
               self.lcd_set_page(yPos + p, xPos)
               for _ in xrange(width):
                  self.lcd_tranfer_data(0x00,1)
                  
            GPIO.output(self.cs, True)
        else:
            print "[DISPLAY] Clear"

    def lcd_clear(self):
        if settings.ON_RASPBERRY:
            GPIO.output(self.cs, False)
            for i in range(0, 8):
                self.lcd_set_page(i,0)
                for j in range(0, 129):
                   self.lcd_tranfer_data(0x00,1)
            GPIO.output(self.cs, True)
        else:
            print "[DISPLAY] Clear"

    def lcd_goto_next_page(self, page, column):
        # la colonna viene data da 0 a 128!!!!!!!!!!!!
        # page = y
        # column = x

        lsb = column & 0x0f # 15
        msb = column & 0xf0 # 240 | 11110000
        msb = msb >> 4  # / 16
        msb = msb | 0x10   # this is 16 |  00010000
        page = page | 0xb0 # 176 | 10110000
        #       (Guarda caso 64 e' 01000000)

        self.lcd_tranfer_data(page, 0)
        self.lcd_tranfer_data(msb,  0)
        self.lcd_tranfer_data(lsb,  0)

        # 128 x 64!
        # 128 / 8 = 16 guarda caso
        # lsb = i primi 4 bit della colonna.. quindi da 0 a 15.
        #                             ?altezza del font?
        #
        # msb = gli ultimi 4 bit della colonna.. quindi da 16 a 128
        # divide msb per 16.. quindi da 0 a 15..
        # poi ci mette il quinti bit (16 + ...) da 16 a 31
        #
        # se column = 0
        # lsb = 0     00000000
        # msb = 16    00010000
        # page = 176  10110000


    def lcd_set_page(self, page, column):
        # la colonna viene data da 0 a 128!!!!!!!!!!!!
        lsb = column & 0x0f # 15
        msb = column & 0xf0 # 240 | 11110000
        msb = msb >> 4  # / 16
        msb = msb | 0x10   # this is 16 |  00010000
        page = page | 0xb0 # 176 | 10110000
        self.lcd_tranfer_data(page,0)
        self.lcd_tranfer_data(msb, 0)
        self.lcd_tranfer_data(lsb, 0)


    def lcd_tranfer_data(self, value, SI):
        GPIO.output(self.cs, False)
        GPIO.output(self.clk, True)
        if SI:
            GPIO.output(self.a0, True)
        else:
            GPIO.output(self.a0, False)
        self.lcd_byte(value)
        GPIO.output(self.cs, True)


    def lcd_byte(self, bits):
        tmp = bits;
        for i in range(0, 8):
            GPIO.output(self.clk, False)
            if(tmp & 0x80):
                GPIO.output(self.si, True)
            else:
                GPIO.output(self.si, False)
            tmp = (tmp<<1)
            GPIO.output(self.clk, True)

        return

def main():
   #             cs rst a0 clk si
   d = RGBDisplay(2, 3, 4, 27, 17)

   d.lcd_ascii168_string(2,2,"RIGA 1")
   d.lcd_ascii168_string(2,4,"RIGA 2")
   d.lcd_ascii168_string(2,6,"RIGA 3")

   i = 0
   while True:
      d.lcd_ascii168_string(2, 0,"HAHA " + str(i))
      i+=1
      time.sleep(1)


if False:
   GPIO.setmode(GPIO.BCM)
   GPIO.setwarnings(False)

   main()

   GPIO.cleanup()
